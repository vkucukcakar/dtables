###
# sptables - Pure Iptables firewall for servers
#
# Copyright (c) 2018, Volkan Kucukcakar
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###

###
# This file is a part of sptables - Pure Iptables firewall for servers
# Filename		: iptables.conf
# Path			: /etc/sptables/conf/iptables.conf
# Description	: Iptables configuration file (Commmon part)
###


###              ###
### MANGLE TABLE ###
###              ###

*mangle
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
:ICMP - [0:0]
:BLACKLIST - [0:0]

# Flush chains
-F PREROUTING
-F ICMP
-F BLACKLIST

# Some packets dropped at mangle table PREROUTING chain for efficiency. (I, personally, did not make a performance test but after reading the following article, I am convinced to move most of the dropping to mangle table. See: https://javapipe.com/ddos/blog/iptables-ddos-protection/ )

# Drop invalid packets (Will work if sysctl.conf value net.netfilter.nf_conntrack_tcp_loose = 0)
-A PREROUTING -m conntrack --ctstate INVALID -j DROP

# Drop new TCP packets other than SYN
-A PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -j DROP

# Drop if MSS (Maximum Segment Size) is uncommon as attacking tools (like hping) do not set this parameter 
-A PREROUTING -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP

# Drop broadcast packets (Prevent Smurf, Fraggle attacks) (change "eth0" with your interface)
-A PREROUTING -i eth0 -m pkttype --pkt-type broadcast -j DROP

# Drop multicast packets (change "eth0" with your interface)
-A PREROUTING -i eth0 -m pkttype --pkt-type multicast -j DROP

# Prevent some known attack types. (Actually, I'm not sure if some of these decades-old rules are already obsoleted by current Linux kernel or something else...)
-A PREROUTING -p tcp --tcp-flags ALL ALL -j DROP
-A PREROUTING -p tcp --tcp-flags ALL NONE -j DROP
-A PREROUTING -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
-A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
-A PREROUTING -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
-A PREROUTING -p tcp --tcp-flags FIN,RST FIN,RST -j DROP
-A PREROUTING -p tcp --tcp-flags ACK,FIN FIN -j DROP
-A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -j DROP
-A PREROUTING -p tcp --tcp-flags ACK,URG URG -j DROP
-A PREROUTING -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP
-A PREROUTING -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP

# Drop packets claiming to be from loopback addresses
-A PREROUTING -s 127.0.0.0/8 ! -i lo -j DROP

# Drop packets claiming to be from some of the other special-use IPv4 addresses described in RFC 6890 (See: https://tools.ietf.org/html/rfc6890 ) (change "eth0" with your interface)
# Not all of the special-use IPv4 addresses are manually hardcoded here. The pre-defined "bogonlist" IPset is intended to be used for also this purpose and could be periodically updated from bogon list providers.
-A PREROUTING -i eth0 -s 0.0.0.0/8 -j DROP
-A PREROUTING -i eth0 -s 169.254.0.0/16 -j DROP
-A PREROUTING -i eth0 -s 192.0.2.0/24 -j DROP
-A PREROUTING -i eth0 -s 240.0.0.0/4 -j DROP

# Drop packets claiming to be from local network ranges (change "eth0" with your interface) 
# On some VM setups, keep your local address range commented and do not lock yourself out!
#-A PREROUTING -i eth0 -s 172.16.0.0/12 -j DROP
#-A PREROUTING -i eth0 -s 192.168.0.0/16 -j DROP
#-A PREROUTING -i eth0 -s 10.0.0.0/8 -j DROP

# Filter ICMP
-A PREROUTING -p icmp -j ICMP

# Drop fragmented ICMP
-A ICMP -p icmp --fragment -j DROP

# Allow ICMP type fragmentation-needed
-A ICMP -p icmp --icmp-type fragmentation-needed -j RETURN

# Allow & rate limit Ping. Limit IP to 3 echo-request packets per 2 seconds.
-A ICMP -p icmp --icmp-type echo-request -m recent --update --seconds 2 --hitcount 3 -j DROP
-A ICMP -p icmp --icmp-type echo-request -m recent --set -j RETURN

# Allow related, established ICMP
-A ICMP -m conntrack --ctstate RELATED,ESTABLISHED -j RETURN

# Drop the rest of ICMP packets or comment the line, it is up to you!
-A ICMP -p icmp -j DROP

# Drop all fragmented packets (Optional)
#-A PREROUTING --fragment -j DROP

# Accept whitelist ipset
-A PREROUTING -m set --match-set whitelist src -j ACCEPT

# Accept trusted proxylist ipset for HTTP and HTTPS ports
-A PREROUTING -p tcp -m multiport --dports 80,443 -m set --match-set proxylist src -j ACCEPT

# Drop banlist ipset
-A PREROUTING -m set --match-set banlist src -j DROP

# Drop bogonlist ipset
-A PREROUTING -m set --match-set bogonlist src -j DROP

# If the attacker tries again before the timeout, update blacklist timeout to 3600 seconds and drop the packet 
-A BLACKLIST -j SET --add-set blacklist src --exist --timeout 3600
-A BLACKLIST -m limit --limit 3/minute --limit-burst 5 -j LOG --log-prefix "sptables:BLACKLIST:" --log-level 4
-A BLACKLIST -j DROP

# Drop blacklist ipset (Packets from previously blacklisted IP addresses dropped at mangle table level for efficiency. Dropped packets are not logged here)
-A PREROUTING -m set --match-set blacklist src -j BLACKLIST

COMMIT


###              ###
### FILTER TABLE ###
###              ###

*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:INPUT-FILTERS - [0:0]
:NEWCONN - [0:0]
:PORTSCAN - [0:0]
:KNOCK - [0:0]
:OUTPUT-FILTERS - [0:0]

# Flush chains
-F INPUT
-F INPUT-FILTERS
-F NEWCONN
-F PORTSCAN
-F KNOCK
-F OUTPUT-FILTERS

# Accept local interface
-A INPUT -i lo -j ACCEPT

# Filter INPUT chain of host
-A INPUT -j INPUT-FILTERS

# Filter OUTPUT chain of host (change "eth0" with your interface)
-A OUTPUT -o eth0 -j OUTPUT-FILTERS

# Accept whitelist ipset
-A INPUT-FILTERS -m set --match-set whitelist src -j ACCEPT
-A OUTPUT-FILTERS -m set --match-set whitelist dst -j ACCEPT

# Accept trusted proxylist ipset for HTTP and HTTPS ports
-A INPUT-FILTERS -p tcp -m multiport --dports 80,443 -m set --match-set proxylist src -j ACCEPT


###                            ###
### INPUT FILTERS (USER RULES) ###
###                            ###

# Block portscan attempts. Detect IP trying to connect more than 6 different ports in one minute, add IP to blacklist if limit is exceeded. (Change --hashlimit-srcmask from 32 to 24 to limit the full Class C network)
# This portscan protection consists of two hashlimit parameters and one blacklist ipset. Even the first hashlimit part could be rewritten with ipset, but the project have limited number of basic sets and I do not want to sacrifice simplicity currently.
# Besides, instead of assigning resources to port scanners with hashlimit, you can also consider using alternative solutions of various situations (like preventing SSH port with IP limitation etc...)
#-A INPUT-FILTERS -m conntrack --ctstate NEW -m hashlimit ! --hashlimit-above 1/minute --hashlimit-burst 1 --hashlimit-mode srcip,dstport --hashlimit-name scanport --hashlimit-srcmask 32 --hashlimit-htable-expire 60000 -m hashlimit --hashlimit-above 1/minute --hashlimit-burst 6 --hashlimit-mode srcip --hashlimit-name portscanner --hashlimit-srcmask 32 --hashlimit-htable-expire 60000 -j PORTSCAN
#-A PORTSCAN -j SET --add-set blacklist src --exist --timeout 3600
#-A PORTSCAN -m limit --limit 3/minute --limit-burst 5 -j LOG --log-prefix "sptables:PORTSCAN:" --log-level 4
#-A PORTSCAN -j DROP


# Limit the number of parallel connections per IP for HTTP and HTTPS ports, add IP to blacklist if limit is exceeded. Limit IP for 100 parallel connections, blacklist for 3600 seconds. (Change --connlimit-mask from 32 to 24 to limit the full Class C network)
-A INPUT-FILTERS -p tcp -m multiport --dports 80,443 -m connlimit --connlimit-above 100 --connlimit-mask 32 -j SET --add-set blacklist src --exist --timeout 3600 
-A INPUT-FILTERS -p tcp -m multiport --dports 80,443 -m connlimit --connlimit-above 100 --connlimit-mask 32 -m limit --limit 3/minute --limit-burst 5 -j LOG --log-prefix "sptables:CONNLIMIT:" --log-level 4
-A INPUT-FILTERS -p tcp -m multiport --dports 80,443 -m connlimit --connlimit-above 100 --connlimit-mask 32 -j DROP


# Limit the number of parallel connections per IP for SSH port, add IP to blacklist if limit is exceeded. Limit IP for 5 parallel connections, blacklist for 3600 seconds. (Change --connlimit-mask from 32 to 24 to limit the full Class C network)
-A INPUT-FILTERS -p tcp --dport 22 -m connlimit --connlimit-above 5 --connlimit-mask 32 -j SET --add-set blacklist src --exist --timeout 3600 
-A INPUT-FILTERS -p tcp --dport 22 -m connlimit --connlimit-above 5 --connlimit-mask 32 -m limit --limit 3/minute --limit-burst 5 -j LOG --log-prefix "sptables:CONNLIMIT:" --log-level 4
-A INPUT-FILTERS -p tcp --dport 22 -m connlimit --connlimit-above 5 --connlimit-mask 32 -j DROP


# Limiting the number of connection attempts per time could be done by recent or hashlimit modules (or even limit module globally, not per IP).
# All the three modules have their own pros and cons. (e.g. recent module have a maximum hitcount value that makes harder to keep track of a large timeframe)
# All examples are given below and some of them are commented.


# Limit the number of new connection attempts per IP for SSH port, add IP to blacklist if limit is exceeded (recent module example). Limit IP for 10 new SSH connections per 60 seconds, blacklist for 3600 seconds.
-A INPUT-FILTERS -p tcp --dport 22 -m conntrack --ctstate NEW -m recent --update --name ssh1 --reap --seconds 60 --hitcount 10 -j NEWCONN
-A INPUT-FILTERS -p tcp --dport 22 -m conntrack --ctstate NEW -m recent --set --name ssh1
-A NEWCONN -j SET --add-set blacklist src --exist --timeout 3600
-A NEWCONN -m limit --limit 3/minute --limit-burst 5 -j LOG --log-prefix "sptables:NEWCONN:" --log-level 4
-A NEWCONN -j DROP


# Limit the number of new connection attempts per IP for SSH port, add IP to blacklist if limit is exceeded (hashlimit module example). Limit IP for 10 new SSH connections per minute, blacklist for 3600 seconds. (Change --hashlimit-srcmask from 32 to 24 to limit the full Class C network)
#-A INPUT-FILTERS -p tcp --dport 22 -m conntrack --ctstate NEW -m hashlimit --hashlimit-name ssh1 --hashlimit-above 10/minute --hashlimit-burst 5 --hashlimit-mode srcip --hashlimit-srcmask 32 -j NEWCONN
#-A NEWCONN -j SET --add-set blacklist src --exist --timeout 3600
#-A NEWCONN -m limit --limit 3/minute --limit-burst 5 -j LOG --log-prefix "sptables:NEWCONN:" --log-level 4
#-A NEWCONN -j DROP


# Limit the number of new connection attempts per IP for HTTP, HTTPS port, add IP to blacklist if limit is exceeded (hashlimit module example). Limit IP for 100 new HTTP, HTTPS connections per minute, blacklist for 3600 seconds. (Change --hashlimit-srcmask from 32 to 24 to limit the full Class C network)
-A INPUT-FILTERS -p tcp -m multiport --dports 80,443 -m conntrack --ctstate NEW -m hashlimit --hashlimit-name http1 --hashlimit-above 100/minute --hashlimit-burst 120 --hashlimit-mode srcip --hashlimit-srcmask 32 -j NEWCONN
#-A INPUT-FILTERS -p tcp -m multiport --dports 80,443 -m conntrack --ctstate NEW -m hashlimit --hashlimit-name http2 --hashlimit-above 3000/hour --hashlimit-burst 3000 --hashlimit-mode srcip --hashlimit-srcmask 32 -j NEWCONN
-A NEWCONN -j SET --add-set blacklist src --exist --timeout 3600
-A NEWCONN -m limit --limit 3/minute --limit-burst 5 -j LOG --log-prefix "sptables:NEWCONN:" --log-level 4
-A NEWCONN -j DROP


# Open incoming ports 22,80,443 (SSH, HTTP, HTTPS)
-A INPUT-FILTERS -p tcp -m multiport --dports 22,80,443 -j ACCEPT


# Port knocking example implemented in pure Iptables. Open example hidden SSH port 2222 if the sequence 3333,4444,5555 is received within a timeout of 5 seconds for each. Keep port 2222 open for 600 seconds of inactivity.
#-A INPUT-FILTERS -p tcp --dport 2222 -m conntrack --ctstate ESTABLISHED,RELATED -m recent --name knock-open --set -j ACCEPT
#-A INPUT-FILTERS -p tcp --dport 2222 -m conntrack --ctstate NEW -m recent --name knock-open --update --seconds 600 --reap -j ACCEPT
#-A INPUT-FILTERS -p tcp -m conntrack --ctstate NEW -j KNOCK
#-A KNOCK -p tcp --dport 3333 -m recent --name knock1 ! --rcheck --seconds 5 --reap -m recent --set --name knock1 -j RETURN
#-A KNOCK -p tcp --dport 4444 -m recent --name knock1 --rcheck --seconds 5 --reap -m recent --name knock1 --remove -m recent --set --name knock2 -j RETURN
#-A KNOCK -p tcp --dport 5555 -m recent --name knock2 --rcheck --seconds 5 --reap -m recent --name knock2 --remove -m recent --set --name knock3 -j RETURN
#-A KNOCK -p tcp -m recent --name knock1 --remove
#-A KNOCK -p tcp -m recent --name knock2 --remove
#-A INPUT-FILTERS -p tcp --dport 5555 -m conntrack --ctstate NEW -m recent --name knock3 --remove -m recent --set --name knock-open -m limit --limit 3/min --limit-burst 5 -j LOG --log-prefix "sptables:KNOCK:" --log-level 4


# Allow established and related packets
-A INPUT-FILTERS -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# Allow ICMP here, since it is already filtered at mangle table.
-A INPUT-FILTERS -p icmp -j ACCEPT

# Reject the rest with icmp-host-prohibited (By default, a packet to a closed port is rejected with an ICMP port-unreachable)
-A INPUT-FILTERS -m limit --limit 3/minute --limit-burst 5 -j LOG --log-prefix "sptables:REJECTED:" --log-level 4
-A INPUT-FILTERS -j REJECT --reject-with icmp-host-prohibited

# Drop the rest of incoming packets (By default, a packet to a closed port is rejected, not dropped!)
#-A INPUT-FILTERS -m limit --limit 3/minute --limit-burst 5 -j LOG --log-prefix "sptables:DROPPED:" --log-level 4
#-A INPUT-FILTERS -j DROP


###                             ###
### OUTPUT FILTERS (USER RULES) ###
###                             ###

# Block outgoing plain SMTP (example)
#-A OUTPUT-FILTERS -p tcp --dport 25 -j DROP

# Accept the rest of outgoing packets
-A OUTPUT-FILTERS -j ACCEPT

COMMIT
